generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid           String   @id @default(uuid())
  email          String   @unique
  hashedPassword String   @map("hashed_password")
  name           String
  surname        String
  avatarPath     String?  @map("avatar_path")
  phoneNumber    String   @map("phone_number")
  role           Role     @default(EXECUTOR)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  settings       UserSettings[]
  messages       Message[]
  chatMember     ChatMember[]
  projects       Project[]
  processes      Process[]
  tasks          Task[]
  executingTasks TaskExecutors[]

  @@map("users")
}

model UserSettings {
  userUuid  String  @id @map("user_uuid")
  darkTheme Boolean @default(false) @map("dark_theme")

  users_uuid User @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)

  @@map("user_settings")
}

model Chat {
  uuid      String   @id @default(uuid())
  type      ChatType @default(DIRECT)
  createdAt DateTime @default(now()) @map("created_at")

  messages Message[]
  members  ChatMember[]

  @@map("chats")
}

model Message {
  uuid      String   @id @default(uuid())
  chatId    String   @map("chat_id")
  senderId  String   @map("sender_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")

  chat         Chat          @relation(fields: [chatId], references: [uuid])
  sender       User          @relation(fields: [senderId], references: [uuid])
  messagesRead MessageRead[]

  @@map("messages")
}

model MessageRead {
  messageId String   @id @map("message_id")
  senderId  String   @map("user_id")
  readAt    DateTime @default(now()) @map("read_at")

  message Message @relation(fields: [messageId], references: [uuid], onDelete: Cascade)

  @@map("message_read")
}

model ChatMember {
  chatId  String
  userId  String
  isAdmin Boolean @default(false) @map("is_admin")

  chat Chat @relation(fields: [chatId], references: [uuid])
  user User @relation(fields: [userId], references: [uuid])

  @@id([chatId, userId])
  @@map("chat_members")
}

enum Role {
  ADMIN
  EXECUTOR
  CONTROLLER

  @@map("roles")
}

enum ChatType {
  DIRECT
  GROUP

  @@map("chat_types")
}

model Project {
  uuid        String        @id @default(uuid())
  name        String
  description String
  status      ProjectStatus @default(IN_PROCESS)
  createdBy   String        @map("created_by")
  createdAt   DateTime      @default(now()) @map("created_at")

  processes Process[]
  tasks     Task[]

  creator_uuid User @relation(fields: [createdBy], references: [uuid])

  @@map("projects")
}

enum ProjectStatus {
  COMPLETED
  CLOSED
  IN_PROCESS
}

model Process {
  uuid        String        @id @default(uuid())
  project     String
  name        String
  status      ProcessStatus @default(IN_PROCESS)
  description String
  createdBy   String        @map("created_by")
  createdAt   DateTime      @default(now()) @map("created_at")

  tasks Task[]

  creator_uuid User    @relation(fields: [createdBy], references: [uuid])
  project_uuid Project @relation(fields: [project], references: [uuid])

  @@map("processes")
}

enum ProcessStatus {
  COMPLETED
  CLOSED
  IN_PROCESS
}

model Task {
  uuid        String       @id @default(uuid())
  process     String
  project     String
  name        String
  description String
  status      TaskStatus   @default(IN_PROCESS)
  priority    TaskPriority
  deadline    DateTime
  createdBy   String       @map("created_by")
  createdAt   DateTime     @default(now()) @map("created_at")

  executingTasks TaskExecutors[]

  creator_uuid User    @relation(fields: [createdBy], references: [uuid])
  process_uuid Process @relation(fields: [process], references: [uuid], onDelete: Cascade)
  project_uuid Project @relation(fields: [project], references: [uuid])
}

enum TaskStatus {
  COMPLETED
  CLOSED
  IN_PROCESS
  COMPLETED_LATE
  IN_PROCESS_LATE
}

enum TaskPriority {
  HIGH
  LOW
  IMMEDIATELY
}

model TaskExecutors {
  executorUuid String @map("user_uuid")
  taskUuid     String @map("task_uuid")

  executor_uuid User @relation(fields: [executorUuid], references: [uuid])
  task_uuid     Task @relation(fields: [taskUuid], references: [uuid], onDelete: Cascade)

  @@id([executorUuid, taskUuid])
  @@map("users_tasks")
}
