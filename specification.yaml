openapi: 3.0.3
info:
  title: CRM API
  description: API для CRM-системы с возможностью настройки сущностей и автоматизации задач. Абсолютно каждый метод также может вернуть 500 код, в случае ошибки на сервере. Также как и любой защищенный роут может вернуть 401 код(Unauthorized) и 403 код если у пользователя нету прав доступа к ресурсу из-за его роли.
  version: 1.0.0
servers:
  - url: http://localhost:3000/v1
    description: Локальный сервер

paths:
    /auth/register:
      post:
        summary: Регистрация пользователя
        description: Регистрирует нового пользователя и отправляет код подтверждения на email.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                required:
                  - email
                  - password
                  - name
                  - surname
                  - phoneNumber
                properties:
                  email:
                    type: string
                    format: email
                  password:
                    type: string
                    format: password
                  name:
                    type: string
                  surname:
                    type: string
                  phoneNumber:
                    type: string
        responses:
          '200':
            description: Код подтверждения отправлен
            content:
              application/json:
                schema:
                  type: string
                  example: Code was sent on email. Send it to confirm registration
          '400':
            description: Неверные данные
          '409':
            description: Пользователь уже зарегестрирован
          '429':
            description: Слишком много попыток отправки email, попробуйте позже

    /auth/verify-register:
      post:
        summary: Подтверждение регистрации
        description: Проверяет код подтверждения и завершает регистрацию.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                required:
                  - email
                  - code
                properties:
                  email:
                    type: string
                    format: email
                  code:
                    type: integer
                    format: int32
        responses:
          '201':
            description: Регистрация подтверждена
            content:
              application/json:
                schema:
                  type: object
                  required:
                    - email
                    - code
                  properties:
                    userData:
                      type: object
                      properties:
                        uuid:
                          type: string
                          example: 0a32478b-b48e-4988-8f05-c259614ff448
                        email:
                          type: string
                          example: testemail@gmail.com
                        name:
                          type: string
                          example: Nikita
                        surname:
                          type: string
                          example: Tsarenko
                        phoneNumber:
                          type: string
                          example: "+79221110500"
                        role:
                          type: string
                          example: executor
                    jwt:
                      type: string
          '400':
            description: Неверные данные или истекший/неверный код

    /auth/resend-code:
      post:
        summary: Повторная отправка кода
        description: Отправляет повторно код подтверждения на email.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                required:
                  - email
                properties:
                  email:
                    type: string
                    format: email
        responses:
          '200':
            description: Код отправлен повторно
            content:
              text/html:
                schema:
                  type: string
                  example: Code is resend
          '400':
            description: Неверные данные
          '429':
            description: Слишком много попыток отправки email, попробуйте позже

    /auth/login:
      post:
        summary: Авторизация пользователя
        description: Авторизует пользователя и возвращает JWT токен.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                required:
                  - email
                  - password
                properties:
                  email:
                    type: string
                    format: email
                  password:
                    type: string
                    format: password
        responses:
          '200':
            description: Успешная авторизация, возвращает JWT
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    userData:
                      type: object
                      properties:
                        name:
                          type: string
                          example: Nikita
                        surname:
                          type: string
                          example: Tsarenko
                        phoneNumber:
                          type: string
                          example: "+79221110500"
                        role:
                          type: string
                          example: executor
                        email:
                          type: string
                          example: testemail@gmail.com
                        uuid:
                          type: string
                          example: 0a32478b-b48e-4988-8f05-c259614ff448
                    jwt:
                      type: string
          '400':
            description: Неверные данные
          '401':
            description: Неверные учетные данные

    /auth/forgot-password:
      post:
        summary: Запрос на восстановление пароля
        description: Отправляет код восстановления на email пользователя.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                required:
                  - email
                properties:
                  email:
                    type: string
                    format: email
        responses:
          '200':
            description: Код восстановления отправлен
            content:
              text/html:
                schema:
                  type: string
                  example: Code was successful sent on email. Continue reset
          '400':
            description: Неверные данные
          '429':
            description: Слишком много попыток отправки email, попробуйте позже

    /auth/verify-reset-password:
      post:
        summary: Проверка кода перед восстановлением пароля
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                required:
                  - email
                  - code
                properties:
                  email:
                    type: string
                    format: email
                  code:
                    type: integer
                    format: int32
        responses:
          '200':
            description: Код подтвержден
            content:
              text/html:
                schema:
                  type: string
                  example: Code is correct
          '400':
            description: Неверный код или неверные данные

    /auth/reset-password:
      post:
        summary: Смена пароля
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                required:
                  - email
                  - code
                  - newPassword
                properties:
                  email:
                    type: string
                    format: email
                  code:
                    type: integer
                    format: int32
                  newPassword:
                    type: string
                    format: password
        responses:
          '201':
            description: Пароль успешно изменен
            content:
              text/html:
                schema:
                  type: string
                  example: Password was changed successful
          '400':
            description: Неверный код или неверные данные
    /settings/update:
      put:
        summary: Изменение настроек
        description: Обновляет настройки пользователя.
        security:
          - bearerAuth: [ ]
        requestBody:
          required: true
          content:
            application/json:
                schema:
                  $ref: "#/components/schemas/UserSettings"
        responses:
          '200':
            description: Настройки успешно обновлены
          '400':
            description: Ошибка в данных

    /settings:
      get:
        summary: Получение настроек
        description: Возвращает текущие настройки пользователя.
        security:
          - bearerAuth: [ ]
        responses:
          '200':
            description: Успешный ответ с настройками
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/UserSettings"
          '400':
            description: Ошибка запроса
    /user:
      get:
        summary: Получение всех пользователей
        description: Возвращает список пользователей.
        security:
          - bearerAuth: [ ]
        responses:
          '200':
            description: Список пользователей
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: "#/components/schemas/User"
    /user/{id}:
      get:
        summary: Получить информацию о пользователе
        description: Возвращает публичные данные пользователя по его ID.
        security:
          - bearerAuth: [ ]
        parameters:
          - name: id
            in: path
            required: true
            description: Уникальный идентификатор пользователя
            schema:
              type: string
        responses:
          200:
            description: Успешный ответ с данными пользователя
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/IPublicUserData'
          404:
            description: Пользователь не найден
    /user/update:
        put:
          summary: Изменение пользователя
          description: Обновляет данные о пользователе.
          security:
            - bearerAuth: [ ]
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    name:
                      type: string
                    surname:
                      type: string
                    phoneNumber:
                      type: string
          responses:
            '200':
              description: Данные пользователя обновлены
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/UserDataWithJwt"
    /user/upload-avatar:
      post:
        summary: Загрузка аватарки
        description: Загружает новую аватарку пользователя.
        security:
          - bearerAuth: [ ]
        requestBody:
          required: true
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  avatar:
                    type: string
                    format: binary
        responses:
          '201':
            description: Аватарка загружена
          '400':
            description: Неверный запрос
          '413':
            description: Файл превышает допустимый размер (5МБ)

    /user/avatar/{userUuid}:
      get:
        summary: Получение аватарки пользователя
        description: Возвращает аватарку пользователя по его ID.
        security:
          - bearerAuth: [ ]
        parameters:
          - name: userUuid
            in: path
            required: true
            schema:
              type: string
              format: uuid
        responses:
          '200':
            description: Аватарка пользователя
            content:
              image/png: { }
              image/jpeg: { }
    /chat/all:
      get:
        summary: HTTP Получить все чаты пользователя с сообщениями
        description: Возвращает список чатов, в которых участвует пользователь, включая сообщения в каждом чате.
        security:
          - BearerAuth: [ ]
        responses:
          '200':
            description: Успешный ответ со списком чатов и сообщениями
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    properties:
                      uuid:
                        type: string
                        description: Уникальный идентификатор чата
                        example: "c5d1a5f1-2a89-4c90-9a16-7ad5a2345678"
                      messages:
                        type: array
                        description: Список сообщений в чате
                        items:
                          type: object
                          properties:
                            uuid:
                              type: string
                              description: Уникальный идентификатор сообщения
                              example: "m5d1a5f1-2a89-4c90-9a16-7ad5a2345678"
                            senderId:
                              type: string
                              description: UUID отправителя
                              example: "u5d1a5f1-2a89-4c90-9a16-7ad5a2345678"
                            content:
                              type: string
                              description: Текст сообщения
                              example: "Привет, как дела?"
                            createdAt:
                              type: string
                              format: date-time
                              description: Дата и время отправки
                              example: "2025-03-04T12:34:56.789Z"
          '401':
            description: Ошибка авторизации (требуется токен)
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: "Unauthorized"
    /chat:
      get:
        summary: WEBSOCKET Создание подключения
        description: 'Ивенты, которые приходят с сервера: 
        exception, message_receive, message_ack, new_chat, message_read, status_online, status_offline'
        security:
          - bearerAuth: [ ]
        responses:
          '200':
            description: Подключение создано
          '401':
            description: Неверный токен
    new_chat:
      post:
        summary: WEBSOCKET Создание нового чата
        description: >
          Событие `new_chat` отправляется через WebSocket для создания нового чата с указанным пользователем.
          При успешном создании чата сервер возвращает подтверждение.
        requestBody:
          description: Объект с данными для создания чата
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  secondChatUser:
                    type: string
                    description: UUID второго пользователя для чата
                    example: "user_uuid_2"
        responses:
          '200':
            description: Чат успешно создан
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      description: Результат создания чата
                      example: "Successful created"
          '400':
            description: Ошибка создания чата (например, неверный ID чата или пользователя)
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: "INVALID_CHAT_ID или INVALID_USER_ID"
    message_send:
      post:
        summary: WEBSOCKET Отправка сообщения
        description: >
          Событие `message_send` используется для отправки нового сообщения в чат.
          После создания сообщения сервер отправляет событие `message_ack` с подтверждением.
        requestBody:
          description: Объект с данными отправляемого сообщения
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  chatId:
                    type: string
                    description: UUID чата, в который отправляется сообщение
                    example: "chat_uuid"
                  content:
                    type: string
                    description: Текст сообщения
                    example: "Привет!"
        responses:
          '200':
            description: Подтверждение успешной отправки сообщения
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    ack:
                      type: string
                      description: Подтверждение с UUID созданного сообщения
                      example: "MESSAGE_ACK_SUCCESSFUL(message.uuid)"
          '400':
            description: Ошибка отправки сообщения (например, неверный ID чата)
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: "INVALID_CHAT_ID"
    message_read:
      post:
        summary: WEBSOCKET Подтверждение прочтения сообщения
        description: >
          Событие `message_read` отправляется для уведомления участников чата о прочтении сообщения.
        requestBody:
          description: Объект с данными о прочитанном сообщении
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  messageId:
                    type: string
                    description: UUID сообщения
                    example: "message_uuid"
                  chatId:
                    type: string
                    description: UUID чата
                    example: "chat_uuid"
        responses:
          '200':
            description: Уведомление о прочтении успешно доставлено
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    result:
                      type: string
                      description: Результат операции
                      example: "Сообщение прочитано"
          '400':
            description: Ошибка при уведомлении о прочтении (например, неверный ID сообщения)
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: "INVALID_MESSAGE_ID"
    status_follow:
      post:
        summary: WEBSOCKET Подписаться на статус пользователя
        description: Подписывает клиента на обновления статуса другого пользователя (онлайн/офлайн). Сразу возвращает ивент status_online/status_offline. А позже вызывает эти ивенты при изменении статуса.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    userUuid:
                      type: error
                      example: userUuid
        responses:
          '200':
            description: Клиент подписался на обновления статуса.
          '400':
            description: Ошибка запроса (например, подписка на самого себя).
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: "Bad Request"
    /projects:
      get:
        summary: Получить все проекты
        security:
          - bearerAuth: []
        parameters:
          - name: status
            in: query
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [COMPLETED, CLOSED, IN_PROCESS]
        responses:
          '200':
            description: Успешный ответ
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Project'

    /projects/create:
      post:
        summary: Создать новый проект
        security:
          - bearerAuth: []
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: New Name
                  description:
                    type: string
                    example: New Description
        responses:
          '201':
            description: Проект создан
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Project'
          '403':
            description: Не админ

    /projects/{id}:
      get:
        summary: Получить проект по ID
        security:
          - bearerAuth: []
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Успешный ответ
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Project'
          '404':
            description: Проект не найден

      put:
        summary: Обновить проект
        security:
          - bearerAuth: []
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: string
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: New Name
                  description:
                    type: string
                    example: New Description
        responses:
          '200':
            description: Проект обновлен
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Project'
          '403':
            description: Не админ
          '404':
            description: Проект не найден

    /projects/{id}/complete:
      patch:
        summary: Завершить проект
        security:
          - bearerAuth: []
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Проект завершен
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Project'
          '403':
            description: Не админ
          '400':
            description: Есть незавершенные процессы

    /projects/{id}/close:
      patch:
        summary: Закрыть проект
        security:
          - bearerAuth: []
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Проект закрыт
          '403':
            description: Не админ

    /projects/{id}/reopen:
      patch:
        summary: Переоткрыть проект
        security:
          - bearerAuth: []
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Проект переоткрыт
          '403':
            description: Не админ

components:
  schemas:
    Project:
      type: object
      properties:
        uuid:
          type: string
          example: 0a32478b-b48e-4988-8f05-c259614ff448
        name:
          type: string
          example: Project Name
        description:
          type: string
          example: Project Description
        status:
          type: string
          enum: [DONE, IN_PROCESS, CLOSED]
        createdBy:
          type: string
          example: userUuid
        createdAt:
          type: string
          example: 2025-03-09T10:26:29.804Z
    IPublicUserData:
      type: object
      properties:
        uuid:
          type: string
          example: 0a32478b-b48e-4988-8f05-c259614ff448
        email:
          type: string
          example: testemail@gmail.com
        name:
          type: string
          example: Nikita
        surname:
          type: string
          example: Tsarenko
        phoneNumber:
          type: string
          example: "+79221110500"
        role:
          type: string
          enum: [EXECUTOR, CONTROLLER, ADMIN]
    UserDataWithJwt:
      type: object
      properties:
        userData:
          type: object
          properties:
            uuid:
              type: string
              example: 0a32478b-b48e-4988-8f05-c259614ff448
            email:
              type: string
              example: testemail@gmail.com
            name:
              type: string
              example: Nikita
            surname:
              type: string
              example: Tsarenko
            phoneNumber:
              type: string
              example: "+79221110500"
            role:
              type: string
              enum: [EXECUTOR, CONTROLLER, ADMIN]
        jwt:
          type: string
    UserSettings:
      type: object
      properties:
        darkTheme:
          type: boolean
          example: true
    User:
      type: object
      properties:
          name:
            type: string
            example: Nikita
          surname:
            type: string
            example: Tsarenko
          phoneNumber:
            type: string
            example: "+79221110500"
          role:
            type: string
            enum: [EXECUTOR, CONTROLLER, ADMIN]
          email:
            type: string
            example: testemail@gmail.com
          uuid:
            type: string
            example: 0a32478b-b48e-4988-8f05-c259614ff448
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT